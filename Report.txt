Name:ryder anderson 

number of elements:10000

Bubble Sort
Sorted:3.76781
Reversed:8.71538
Random:7.32373

Bubble Sort Early Exit
Sorted:0.00055
Reversed:5.81330
Random:4.73409

Selection Sort
Sorted:1.81170
Reversed:1.92280
Random:2.11473

Insertion Sort
Sorted:0.00136
Reversed:9.77372
Random:4.59795

Merge Sort
Sorted:0.02849
Reversed:0.03112
Random:0.02968

Questions to answer:
1) What was the worst case scenario for any sorting technique?
For inserttion it was reversed.

2) The first 3 sorts have the same runtime of O(n^2). Why were the times different? Why would one be more efficient than the others?
The scenario for one wasnt as bad as the other or they were better equipped for the worse scenario. They were better at solving the solution the ywere given.

3) Why was merge sort so much more efficient?
Splits them into many small sections then puts them all together.

4) The built-in sorting technique for most programming languages is known as TimSort.
This is a merge sort until the arrays have fewer than 10 elements, then it does an insertion sort. Why would this be useful?
Becuase it would be more work to seperate but less work to recoubin them.

5) What issues can you see with a recursive sorting technique like merge sort?
It would take the around same time to do a random list as it would one thats almost sorted correctly.